/*!
FieldValidator, a Field Validator without form for jQuery and Prototype
by Gary Aguero for crgary, 

Version 1.0.0
Full source at https://github.com/crgary/fieldValidator
Copyright (c) 2016 crgary

MIT License, https://github.com/crgary/fieldValidator/blob/master/LICENSE.md
This file is generated by `grunt build`, do not edit it by hand.
*/

(function() {
    var $,
        AbstractFieldValidator,
        FieldValidator,
        _ref,
        __hasProp = {}.hasOwnProperty,
        __extends = function(child, parent) {
            for (var key in parent) {
                if (__hasProp.call(parent, key)) child[key] = parent[key];
            }

            function ctor() { this.constructor = child; }

            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        };

    AbstractFieldValidator = (function() {
        function AbstractFieldValidator(form_field, options) {
            this.form_field = form_field;
            if (!AbstractFieldValidator.browser_is_supported()) {
                return;
            }
            this.set_default_values();
            this.setup();
            this.set_message_error();
            this.set_up_html();
            this.register_observers();
            this.on_ready();
        }

        AbstractFieldValidator.prototype.set_message_error=function(){
            this.message_error = this.$form_field.data('message-error') != null
                ? this.$form_field.data('message-error')
                : AbstractFieldValidator.default_message_error;
        };

        AbstractFieldValidator.prototype.set_default_values = function() {

        };        

        AbstractFieldValidator.browser_is_supported = function() {
            if (/iP(od|hone)/i.test(window.navigator.userAgent)) {
                return false;
            }
            if (/Android/i.test(window.navigator.userAgent)) {
                if (/Mobile/i.test(window.navigator.userAgent)) {
                    return false;
                }
            }
            if (/IEMobile/i.test(window.navigator.userAgent)) {
                return false;
            }
            if (/Windows Phone/i.test(window.navigator.userAgent)) {
                return false;
            }
            if (/BlackBerry/i.test(window.navigator.userAgent)) {
                return false;
            }
            if (/BB10/i.test(window.navigator.userAgent)) {
                return false;
            }
            if (window.navigator.appName === "Microsoft Internet Explorer") {
                return document.documentMode >= 8;
            }
            return true;
        };

        AbstractFieldValidator.default_message_error = "Required Field";

        return AbstractFieldValidator;

    })();

    $ = jQuery;

    $.fn.extend({
        fieldValidator: function(options) {
            if (!AbstractFieldValidator.browser_is_supported()) {
                return this;
            }
            return this.each(function(input_field) {
                var $this, fieldValidator;
                $this = $(this);
                fieldValidator = $this.data('fieldValidator');
                if (options === 'destroy') {
                    if (fieldValidator instanceof FieldValidator) {
                        fieldValidator.destroy();
                    }
                    return;
                }
                if (!(fieldValidator instanceof FieldValidator)) {
                    $this.data('fieldValidator', new FieldValidator(this, options));
                }
            });
        }
    });

    FieldValidator = (function(_super) {
        __extends(FieldValidator, _super);

        function FieldValidator() {
            _ref = FieldValidator.__super__.constructor.apply(this, arguments);
            return _ref;
        }

        FieldValidator.prototype.setup = function() {
            return this.$form_field = $(this.form_field);
        };

        FieldValidator.prototype.set_up_html = function() {
            var container_classes, container_props;
            container_classes = ["validation-error-message"];
            container_props = {
                class: container_classes.join(' '),
            };
            this.container = $("<span />", container_props);
            this.container.html('<i>' + this.message_error + '</i>');
            
            this.$form_field.after(this.container);

            return this.set_label_behavior();
        };

        FieldValidator.prototype.on_ready = function() {
            return this.$form_field.trigger("fieldValidator:ready", {
                fieldValidator: this
            });
        };

        FieldValidator.prototype.register_observers = function() {
            var _this = this;
            this.$form_field.bind('focusout.fieldValidator', function(evt) {
                _this.field_focusout(evt);
                return evt.preventDefault();
            });            
        };

        FieldValidator.prototype.field_focusout = function(evt) {
            var is_required = this.$form_field.prop('required');
            var value = this.$form_field.val();

            if(is_required && !value){
                this.set_validation_error();                                
            }else{
                if(this.$form_field.is('input[type=email]')){
                    var match = /([\d\w]+[\.\w\d]*)\+?([\.\w\d]*)?@([\w\d]+[\.\w\d]*)/g.test(value);
                    if(match){
                        this.clear_validation_error();
                    }else{
                        this.set_validation_error();    
                    }
                }else{
                    this.clear_validation_error();
                }                
            }
        };

        FieldValidator.prototype.set_validation_error = function() {
            $(this.form_field_label).addClass('validation-error-label');
            this.$form_field.addClass('validation-error');
            this.container.show();
        };

        FieldValidator.prototype.clear_validation_error = function() {
            $(this.form_field_label).removeClass('validation-error-label');
            this.$form_field.removeClass('validation-error');
            this.container.hide();
        };        

        FieldValidator.prototype.set_label_behavior = function() {
            var _this = this;
            this.form_field_label = this.$form_field.parents("label");
            if (!this.form_field_label.length && this.form_field.id.length) {
                return this.form_field_label = $("label[for='" + this.form_field.id + "']");
            }
        };

        FieldValidator.prototype.destroy = function() {
            this.container.remove();
            this.$form_field.removeData('fieldValidator');
            return this.$form_field.removeData('fieldValidator');
        };

        return FieldValidator;

    })(AbstractFieldValidator);

}).call(this);